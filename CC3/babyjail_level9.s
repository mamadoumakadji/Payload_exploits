.section .data
flag:
    .ascii "flag\0"
buffer:
    .space 100

.section .text
.global _start
.intel_syntax noprefix

_start:
    # Open the flag file
    mov eax, 5                # Syscall number (sys_open)
    lea ebx, [flag]           # Filename (load address of flag into ebx)
    xor ecx, ecx              # Flags (O_RDONLY)
    int 0x80                  # Trigger the syscall

    # Check if the file was opened successfully
    test eax, eax             # Test if eax (file descriptor) is -1 (error)
    js exit                   # Jump to exit if open failed

    # Save the file descriptor
    mov ebx, eax

    # Read the flag file
    mov eax, 3                # Syscall number (sys_read)
    lea ecx, [buffer]         # Buffer to store the flag
    mov edx, 100              # Number of bytes to read
    int 0x80                  # Trigger the syscall

    # Write the flag to stdout
    mov edx, eax              # Number of bytes read
    mov eax, 4                # Syscall number (sys_write)
    mov ebx, 1                # File descriptor (stdout)
    lea ecx, [buffer]         # Buffer to write
    int 0x80                  # Trigger the syscall

exit:
    # Exit
    xor ebx, ebx              # Exit code 0
    mov eax, 1                # Syscall number (sys_exit)
    int 0x80                  # Trigger the syscall
